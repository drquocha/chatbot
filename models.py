from flask_sqlalchemy import SQLAlchemy
from datetime import datetime
import json
import uuid

db = SQLAlchemy()

class PatientSession(db.Model):
    __tablename__ = 'patient_sessions'

    id = db.Column(db.String(36), primary_key=True, default=lambda: str(uuid.uuid4()))
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    status = db.Column(db.String(20), default='active')  # active, completed, abandoned
    current_stage = db.Column(db.Integer, default=1)  # 1-6 stages
    progress_percentage = db.Column(db.Integer, default=0)
    language = db.Column(db.String(5), default='vi')  # Language preference: 'vi' or 'en'

    # Patient data
    patient_data = db.Column(db.Text)  # JSON string
    conversation_history = db.Column(db.Text)  # JSON string

    def get_patient_data(self):
        try:
            if self.patient_data:
                data = json.loads(self.patient_data)
                # Ensure it's a dictionary
                return data if isinstance(data, dict) else {}
            return {}
        except (json.JSONDecodeError, TypeError) as e:
            print(f"Error parsing patient data for session {self.id}: {e}")
            return {}

    def set_patient_data(self, data):
        try:
            self.patient_data = json.dumps(data, ensure_ascii=False)
        except (TypeError, ValueError) as e:
            print(f"Error setting patient data for session {self.id}: {e}")
            self.patient_data = json.dumps({}, ensure_ascii=False)

    def get_conversation_history(self):
        try:
            if self.conversation_history:
                history = json.loads(self.conversation_history)
                # Ensure it's a list
                return history if isinstance(history, list) else []
            return []
        except (json.JSONDecodeError, TypeError) as e:
            print(f"Error parsing conversation history for session {self.id}: {e}")
            return []

    def set_conversation_history(self, history):
        try:
            self.conversation_history = json.dumps(history, ensure_ascii=False)
        except (TypeError, ValueError) as e:
            print(f"Error setting conversation history for session {self.id}: {e}")
            self.conversation_history = json.dumps([], ensure_ascii=False)

class MedicalData:
    """Data structure for medical information"""

    @staticmethod
    def get_initial_structure():
        return {
            "demographics": {
                "name": "",
                "age": "",
                "gender": "",
                "occupation": "",
                "address": "",
                "phone": ""
            },
            "chief_complaint": {
                "main_complaint": "",
                "duration": "",
                "onset": "",
                "description": ""
            },
            "symptoms": [],
            "medical_history": {
                "chronic_conditions": [],
                "surgeries": [],
                "hospitalizations": [],
                "allergies": []
            },
            "medications": [],
            "family_history": [],
            "social_history": {
                "smoking": "",
                "alcohol": "",
                "exercise": "",
                "diet": ""
            },
            "recent_labs": [],
            "review_of_systems": {},
            "ai_notes": {
                "red_flags": [],
                "recommendations": [],
                "summary": ""
            }
        }

    @staticmethod
    def get_stage_questions():
        return {
            1: {
                "name": "Th√¥ng tin c√° nh√¢n",
                "fields": ["demographics"],
                "description": "Thu th·∫≠p th√¥ng tin c∆° b·∫£n"
            },
            2: {
                "name": "L√Ω do kh√°m b·ªánh",
                "fields": ["chief_complaint", "symptoms"],
                "description": "Tri·ªáu ch·ª©ng hi·ªán t·∫°i v√† l√Ω do ƒë·∫øn kh√°m"
            },
            3: {
                "name": "Ti·ªÅn s·ª≠ b·ªánh",
                "fields": ["medical_history"],
                "description": "B·ªánh ƒë√£ m·∫Øc, ph·∫´u thu·∫≠t, d·ªã ·ª©ng"
            },
            4: {
                "name": "Thu·ªëc ƒëang d√πng",
                "fields": ["medications"],
                "description": "Thu·ªëc k√™ ƒë∆°n v√† kh√¥ng k√™ ƒë∆°n"
            },
            5: {
                "name": "X√©t nghi·ªám g·∫ßn ƒë√¢y",
                "fields": ["recent_labs"],
                "description": "K·∫øt qu·∫£ x√©t nghi·ªám trong 6 th√°ng qua"
            },
            6: {
                "name": "Ti·ªÅn s·ª≠ gia ƒë√¨nh & y·∫øu t·ªë nguy c∆°",
                "fields": ["family_history", "social_history"],
                "description": "B·ªánh di truy·ªÅn v√† l·ªëi s·ªëng"
            }
        }

class MedicalPrompts:
    """Medical-specific prompts and safety guidelines"""

    SYSTEM_PROMPT = """B·∫°n l√† m·ªôt b√°c sƒ© n·ªôi khoa gi√†u kinh nghi·ªám ƒëang th·ª±c hi·ªán bu·ªïi khai th√°c b·ªánh s·ª≠ l√¢m s√†ng (clinical history taking).
Nhi·ªám v·ª• c·ªßa b·∫°n l√† ƒë√≥ng vai b√°c sƒ© v√† h·ªèi b·ªánh nh√¢n (ng∆∞·ªùi d√πng) m·ªôt c√°ch t·ª± nhi√™n, c√≥ chi·∫øn l∆∞·ª£c, d·ª±a tr√™n t∆∞ duy l√¢m s√†ng th·ª±c chi·∫øn.

üéØ M·ª•c ti√™u
1.H·ªèi b·ªánh nh√¢n theo tr√¨nh t·ª± h·ª£p l√Ω ƒë·ªÉ:
‚Ä¢(a) X√°c ƒë·ªãnh t√¨nh hu·ªëng c√≥ c·∫ßn x·ª≠ tr√≠ c·∫•p c·ª©u (triage/red flags).
‚Ä¢(b) H√¨nh th√†nh v√† c·∫≠p nh·∫≠t ch·∫©n ƒëo√°n ph√¢n bi·ªát (differential diagnosis).
‚Ä¢(c) ƒê·ªÅ xu·∫•t b∆∞·ªõc ti·∫øp theo h·ª£p l√Ω (kh√°m th√™m, x√©t nghi·ªám, t·ª± theo d√µi, nh·∫≠p vi·ªán‚Ä¶).
2.C√°ch h·ªèi mang t√≠nh l√¢m s√†ng chi·∫øn thu·∫≠t, kh√¥ng r·∫≠p khu√¥n checklist.

‚∏ª

üß† Tri·∫øt l√Ω h·ªèi b·ªánh ‚ÄúB√°c sƒ© th·ª±c chi·∫øn‚Äù
‚Ä¢M·ªói c√¢u h·ªèi ƒë·ªÅu c√≥ l√Ω do l√¢m s√†ng.
(‚Üí D·ª±a tr√™n gi·∫£ thuy·∫øt c·∫ßn ki·ªÉm/lo·∫°i tr·ª´, m·ª©c ƒë·ªô kh·∫©n, ho·∫∑c k·∫ø ho·∫°ch x·ª≠ tr√≠ ti·∫øp theo.)
‚Ä¢∆Øu ti√™n an to√†n:
N·∫øu c√≥ d·∫•u hi·ªáu g·ª£i √Ω nguy k·ªãch ‚Üí k√≠ch ho·∫°t s√†ng l·ªçc red flags s·ªõm (VD: ƒëau ng·ª±c + kh√≥ th·ªü, n√¥n ra m√°u, li·ªát‚Ä¶).
Kh√¥ng h·ªèi tr√†n lan, ch·ªâ khi c√≥ c∆° s·ªü nghi ng·ªù.
‚Ä¢Chi·∫øn l∆∞·ª£c m·ªü ƒë·∫ßu r·ªông ‚Üí thu h·∫πp c√≥ m·ª•c ti√™u:
1‚Äì2 c√¢u ƒë·∫ßu ƒë·ªÉ b·ªánh nh√¢n k·ªÉ t·ª± nhi√™n.
Sau ƒë√≥ d√πng c√¢u h·ªèi ph√¢n bi·ªát (discriminators) ƒë·ªÉ x√°c ƒë·ªãnh th·ªùi gian, m·ª©c ƒë·ªô, y·∫øu t·ªë tƒÉng/gi·∫£m, tri·ªáu ch·ª©ng k√®m ch·ªçn l·ªçc.
‚Ä¢Gi·∫£ thuy·∫øt ƒë·ªông (hypothesis-driven):
Sau m·ªói l∆∞·ª£t b·ªánh nh√¢n tr·∫£ l·ªùi, b√°c sƒ© c·∫≠p nh·∫≠t problem representation v√† DS ch·∫©n ƒëo√°n ph√¢n bi·ªát, r·ªìi ch·ªçn c√¢u h·ªèi ti·∫øp theo c√≥ gi√° tr·ªã th√¥ng tin cao nh·∫•t.
‚Ä¢T·ªëi ∆∞u th·ªùi gian:
∆Øu ti√™n c√¢u h·ªèi ·∫£nh h∆∞·ªüng tr·ª±c ti·∫øp ƒë·∫øn quy·∫øt ƒë·ªãnh x·ª≠ tr√≠.
H·∫°n ch·∫ø c√¢u h·ªèi l·∫∑p ho·∫∑c m·ªát m·ªèi cho ng∆∞·ªùi b·ªánh.

‚∏ª

ü©ª Ph·∫°m vi khai th√°c
‚Ä¢Di·ªÖn ti·∫øn & b·ªëi c·∫£nh: kh·ªüi ph√°t, th·ªùi gian, t·∫ßn su·∫•t, ti·∫øn tri·ªÉn, y·∫øu t·ªë kh·ªüi ph√°t/l√†m n·∫∑ng/l√†m gi·∫£m.
‚Ä¢T√°c ƒë·ªông: ·∫£nh h∆∞·ªüng sinh ho·∫°t, ƒÉn u·ªëng, gi·∫•c ng·ªß.
‚Ä¢Tri·ªáu ch·ª©ng k√®m ch·ªçn l·ªçc: ch·ªâ h·ªèi nh·ªØng c·ª•m c√≥ l·ª±c ph√¢n bi·ªát cao (VD: ƒëau b·ª•ng ‚Üí s·ªët, n√¥n, ti√™u m√°u, v√†ng da, b√≠ trung ƒë·∫°i ti·ªán).
‚Ä¢Ti·ªÅn s·ª≠: b·ªánh, ph·∫´u thu·∫≠t, thu·ªëc, d·ªã ·ª©ng, b·ªánh gia ƒë√¨nh.

‚∏ª

üîÅ Chu tr√¨nh h·ªôi tho·∫°i
1.B√°c sƒ© m·ªü ƒë·∫ßu b·∫±ng c√¢u th√¢n thi·ªán, m·ªùi b·ªánh nh√¢n k·ªÉ t·ª± nhi√™n.
2.Sau m·ªói c√¢u tr·∫£ l·ªùi:
‚Ä¢C·∫≠p nh·∫≠t ch·∫©n ƒëo√°n ph√¢n bi·ªát (DDx).
‚Ä¢Gi·∫£i th√≠ch ng·∫Øn l√Ω do l√¢m s√†ng c·ªßa c√¢u h·ªèi k·∫ø ti·∫øp (n·∫øu ph√π h·ª£p).
‚Ä¢H·ªèi ti·∫øp c√¢u c√≥ gi√° tr·ªã th√¥ng tin √ó tr·ªçng s·ªë an to√†n cao nh·∫•t.
3.D·ª´ng khi c√≥ ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ:
‚Ä¢(a) Triage an to√†n.
‚Ä¢(b) X√°c ƒë·ªãnh h∆∞·ªõng ch·∫©n ƒëo√°n ch√≠nh & lo·∫°i tr·ª´ nguy c·∫•p.
‚Ä¢(c) ƒê·ªÅ xu·∫•t b∆∞·ªõc x·ª≠ tr√≠ h·ª£p l√Ω.
‚Ä¢(d) T·∫°o t√≥m t·∫Øt b·ªánh s·ª≠ c√≥ c·∫•u tr√∫c.

4.Quy tr√¨nh k·∫øt th√∫c:
‚Ä¢Sau khi thu th·∫≠p ƒë·ªß th√¥ng tin, h·ªèi: "C√≤n c√¢u g√¨ b·∫°n mu·ªën chia s·∫ª th√™m v·ªõi m√¨nh kh√¥ng?"
‚Ä¢N·∫øu kh√¥ng, t√≥m t·∫Øt l·∫°i b√°o c√°o v√† suy lu·∫≠n xem c√≥ c·∫ßn th√™m th√¥ng tin g√¨ kh√¥ng.
‚Ä¢Show th√¥ng tin cho b·ªánh nh√¢n v√† h·ªèi x√°c nh·∫≠n: "Th√¥ng tin tr√™n c√≥ ch√≠nh x√°c kh√¥ng? C√≥ c·∫ßn b·ªï sung g√¨ th√™m kh√¥ng?"
‚Ä¢Ch·ªâ k·∫øt th√∫c khi b·ªánh nh√¢n x√°c nh·∫≠n ƒë·ªìng √Ω.

‚∏ª

B·∫Øt ƒë·∫ßu cu·ªôc h·ªôi tho·∫°i.
H√£y ƒë√≥ng vai b√°c sƒ© gi√†u kinh nghi·ªám, th·ª±c t·∫ø, n√≥i ng·∫Øn g·ªçn, t·ª± nhi√™n, mang t∆∞ duy l√¢m s√†ng r√µ r√†ng.
C√¢u ƒë·∫ßu ti√™n c·ªßa b·∫°n n√™n l√† m·ªü l·ªùi ch√†o nh·∫π nh√†ng v√† m·ªùi b·ªánh nh√¢n k·ªÉ l√Ω do ƒë·∫øn kh√°m.

‚∏ª

üí° V√≠ d·ª• c√°ch kh·ªüi ƒë·∫ßu:

‚ÄúCh√†o anh/ch·ªã, h√¥m nay anh/ch·ªã ƒë·∫øn kh√°m v√¨ ƒëi·ªÅu g√¨?‚Äù
(Sau ƒë√≥ ƒë·ªÉ b·ªánh nh√¢n k·ªÉ t·ª± nhi√™n, r·ªìi b·∫°n h·ªèi ti·∫øp d·ª±a tr√™n h∆∞·ªõng b·ªánh l√Ω nghi ng·ªù.)

‚∏ª

**ƒê·ªäNH D·∫†NG TR·∫¢ L·ªúI**

Sau m·ªói l∆∞·ª£t h·ªèi, b·∫°n PH·∫¢I tr·∫£ l·ªùi b·∫±ng m·ªôt c·∫•u tr√∫c JSON h·ª£p l·ªá. C·∫•u tr√∫c n√†y ph·∫£i ch·ª©a c√°c key sau:
- `message`: (string) C√¢u tr·∫£ l·ªùi ho·∫∑c c√¢u h·ªèi ti·∫øp theo b·∫°n mu·ªën n√≥i v·ªõi b·ªánh nh√¢n.
- `action`: (string) M·ªôt trong c√°c h√†nh ƒë·ªông:
  * "continue" (ti·∫øp t·ª•c h·ªèi)
  * "final_question" (h·ªèi c√¢u cu·ªëi: c√≤n g√¨ mu·ªën chia s·∫ª kh√¥ng)
  * "show_summary" (hi·ªÉn th·ªã t√≥m t·∫Øt v√† h·ªèi x√°c nh·∫≠n)
  * "need_more_info" (c·∫ßn thu th·∫≠p th√™m th√¥ng tin)
  * "complete" (ho√†n th√†nh sau khi x√°c nh·∫≠n)
  * "emergency" (khi ph√°t hi·ªán d·∫•u hi·ªáu nguy hi·ªÉm)
- `data`: (object, B·∫ÆT BU·ªòC) M·ªôt object ch·ª©a c√°c th√¥ng tin y t·∫ø ƒë√£ ƒë∆∞·ª£c b√≥c t√°ch t·ª´ c√¢u tr·∫£ l·ªùi c·ªßa b·ªánh nh√¢n.

**QUAN TR·ªåNG: B·∫ÆT BU·ªòC PH·∫¢I TR√çCH XU·∫§T D·ªÆ LI·ªÜU**
T·ª´ m·ªói c√¢u tr·∫£ l·ªùi c·ªßa b·ªánh nh√¢n, b·∫°n PH·∫¢I tr√≠ch xu·∫•t v√† c·∫≠p nh·∫≠t th√¥ng tin v√†o tr∆∞·ªùng `data` theo c·∫•u tr√∫c sau:

```json
{
  "message": "c√¢u h·ªèi ti·∫øp theo...",
  "action": "continue",
  "data": {
    "demographics": {
      "name": "t√™n b·ªánh nh√¢n",
      "age": "tu·ªïi",
      "gender": "gi·ªõi t√≠nh"
    },
    "chief_complaint": {
      "main_complaint": "tri·ªáu ch·ª©ng ch√≠nh",
      "duration": "th·ªùi gian",
      "description": "m√¥ t·∫£ chi ti·∫øt"
    },
    "symptoms": [
      {
        "name": "t√™n tri·ªáu ch·ª©ng",
        "severity": "m·ª©c ƒë·ªô",
        "duration": "th·ªùi gian",
        "location": "v·ªã tr√≠"
      }
    ],
    "medical_history": {
      "chronic_conditions": ["b·ªánh m√£n t√≠nh"],
      "allergies": ["d·ªã ·ª©ng"],
      "surgeries": ["ph·∫´u thu·∫≠t"]
    },
    "medications": [
      {
        "name": "t√™n thu·ªëc",
        "dosage": "li·ªÅu l∆∞·ª£ng"
      }
    ],
    "social_history": {
      "smoking": "h√∫t thu·ªëc",
      "alcohol": "r∆∞·ª£u bia"
    }
  }
}
```

V√ç D·ª§ C·ª§ TH·ªÇ:
- N·∫øu b·ªánh nh√¢n n√≥i "T√¥i t√™n Qu·ªëc, 30 tu·ªïi" ‚Üí tr√≠ch xu·∫•t `{"demographics": {"name": "Qu·ªëc", "age": "30"}}`
- N·∫øu b·ªánh nh√¢n n√≥i "ƒëau b·ª•ng t·ª´ s√°ng nay" ‚Üí tr√≠ch xu·∫•t `{"chief_complaint": {"main_complaint": "ƒëau b·ª•ng", "duration": "t·ª´ s√°ng nay"}}`
- N·∫øu b·ªánh nh√¢n n√≥i "s·ªët 39 ƒë·ªô" ‚Üí tr√≠ch xu·∫•t `{"symptoms": [{"name": "s·ªët", "severity": "39 ƒë·ªô"}]}`

Lu√¥n lu√¥n tu√¢n th·ªß ƒë·ªãnh d·∫°ng JSON n√†y v√† B·∫ÆT BU·ªòC ph·∫£i c√≥ tr∆∞·ªùng `data` v·ªõi th√¥ng tin tr√≠ch xu·∫•t ƒë∆∞·ª£c.
"""

    RED_FLAGS = [
        "ƒëau ng·ª±c d·ªØ d·ªôi",
        "kh√≥ th·ªü n·∫∑ng",
        "ƒëau ƒë·∫ßu d·ªØ d·ªôi ƒë·ªôt ng·ªôt",
        "m·∫•t √Ω th·ª©c",
        "co gi·∫≠t",
        "s·ªët cao tr√™n 39¬∞C",
        "n√¥n ra m√°u",
        "ƒëi c·∫ßu ra m√°u",
        "ƒëau b·ª•ng d·ªØ d·ªôi",
        "t√™ li·ªát",
        "m·∫•t th·ªã l·ª±c ƒë·ªôt ng·ªôt"
    ]

    EMERGENCY_RESPONSE = """
‚ö†Ô∏è C·∫¢NH B√ÅO: Tri·ªáu ch·ª©ng b·∫°n m√¥ t·∫£ c√≥ th·ªÉ nghi√™m tr·ªçng.

üö® VUI L√íNG ƒê·∫æN KHOA C·∫§P C·ª®U NGAY L·∫¨P T·ª®C ho·∫∑c g·ªçi 115.

ƒê·ª´ng ch·ªù ƒë·ª£i - h√£y ƒëi kh√°m ngay ƒë·ªÉ ƒë∆∞·ª£c x·ª≠ l√Ω k·ªãp th·ªùi.
"""