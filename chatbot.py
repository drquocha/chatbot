import openai
import os
from typing import List, Dict
from web_search import WebSearcher

class SimpleChatbot:
    def __init__(self, api_key: str = None):
        self.client = openai.OpenAI(api_key=api_key or os.getenv("OPENAI_API_KEY"))
        self.conversation_history: List[Dict[str, str]] = []
        self.web_searcher = WebSearcher()

    def add_message(self, role: str, content: str):
        self.conversation_history.append({"role": role, "content": content})

    def needs_web_search(self, user_message: str) -> bool:
        """Use LLM to intelligently decide if web search is needed"""
        try:
            decision_prompt = f"""C√¢u h·ªèi n√†y c√≥ c·∫ßn t√¨m ki·∫øm th√¥ng tin C·∫¨P NH·∫¨T tr√™n Internet kh√¥ng?

Ch·ªâ tr·∫£ l·ªùi: "C√ì" ho·∫∑c "KH√îNG"

C·∫¶N t√¨m ki·∫øm khi:
- H·ªèi v·ªÅ l√£nh ƒë·∫°o hi·ªán t·∫°i, ch√≠nh ph·ªß hi·ªán t·∫°i
- Gi√° c·∫£ hi·ªán t·∫°i, th·ªëng k√™ m·ªõi nh·∫•t
- Tin t·ª©c, s·ª± ki·ªán ƒëang di·ªÖn ra
- Th·ªùi ti·∫øt h√¥m nay/hi·ªán t·∫°i

KH√îNG c·∫ßn t√¨m ki·∫øm khi:
- H·ªèi C√ÅCH L√ÄM g√¨ ƒë√≥ (n·∫•u ƒÉn, s·ª≠a ch·ªØa, h·ªçc t·∫≠p)
- H·ªèi C√îNG TH·ª®C m√≥n ƒÉn
- Gi·∫£i th√≠ch kh√°i ni·ªám, ƒë·ªãnh nghƒ©a
- Ki·∫øn th·ª©c t·ªïng qu√°t kh√¥ng ƒë·ªïi theo th·ªùi gian

C√¢u h·ªèi: "{user_message}"

Tr·∫£ l·ªùi:"""

            response = self.client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": decision_prompt}],
                max_tokens=10,
                temperature=0.1
            )

            decision = response.choices[0].message.content.strip().upper()
            needs_search = "C√ì" in decision

            print(f"DEBUG: LLM decision for '{user_message}': {decision} -> needs_search: {needs_search}")
            return needs_search

        except Exception as e:
            print(f"DEBUG: LLM decision failed, falling back to keywords: {e}")
            # Fallback to keyword-based approach if LLM fails
            search_keywords = [
                'hi·ªán t·∫°i', 'b√¢y gi·ªù', 'm·ªõi nh·∫•t', 'c·∫≠p nh·∫≠t', 't√¨nh h√¨nh',
                't·ªïng b√≠ th∆∞', 'ch·ªß t·ªãch n∆∞·ªõc', 'th·ªß t∆∞·ªõng', 'l√£nh ƒë·∫°o',
                'tin t·ª©c', 'tin m·ªõi', 'h√¥m nay', 'nƒÉm 2024', 'nƒÉm 2025',
                'ai ƒëang', 'gi·ªù c√≥', 'gi·ªù l√†', 'ƒëang l√†', 'c√≥ bao nhi√™u',
                'web search', 't√¨m ki·∫øm', 'search', 'ng√†y m·∫•y'
            ]
            message_lower = user_message.lower()
            return any(keyword in message_lower for keyword in search_keywords)

    def get_response(self, user_message: str) -> str:
        self.add_message("user", user_message)

        try:
            # Check if we need web search for current information
            needs_search = self.needs_web_search(user_message)

            if needs_search:
                print("üîç ƒêang t√¨m ki·∫øm th√¥ng tin m·ªõi nh·∫•t...")
                search_results = self.web_searcher.search_and_summarize(user_message)

                # CRITICAL FIX: Preserve conversation history and enhance the last message
                # Get all conversation history except the last user message
                messages_for_api = self.conversation_history[:-1].copy()

                # Create enhanced prompt that includes search results
                enhanced_prompt = f"""D·ª±a tr√™n th√¥ng tin t√¨m ki·∫øm m·ªõi nh·∫•t t·ª´ web:

{search_results}

H√£y tr·∫£ l·ªùi c√¢u h·ªèi: {user_message}

L∆∞u √Ω: ∆Øu ti√™n th√¥ng tin t·ª´ k·∫øt qu·∫£ t√¨m ki·∫øm n·∫øu c√≥, k·∫øt h·ª£p v·ªõi ng·ªØ c·∫£nh cu·ªôc tr√≤ chuy·ªán tr∆∞·ªõc ƒë√≥, v√† tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát m·ªôt c√°ch ch√≠nh x√°c, c·∫≠p nh·∫•t."""

                # Add the enhanced prompt as the new user message
                messages_for_api.append({"role": "user", "content": enhanced_prompt})
                messages = messages_for_api

                # Update conversation history to reflect what was actually sent to the API
                self.conversation_history[-1] = {"role": "user", "content": enhanced_prompt}
            else:
                # Use normal conversation history
                messages = self.conversation_history

            response = self.client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=messages,
                max_tokens=500,
                temperature=0.7
            )

            assistant_message = response.choices[0].message.content
            self.add_message("assistant", assistant_message)

            return assistant_message

        except Exception as e:
            return f"L·ªói: {str(e)}"

    def clear_history(self):
        self.conversation_history = []

def main():
    print("ü§ñ Chatbot Demo - Nh·∫≠p 'quit' ƒë·ªÉ tho√°t")
    print("-" * 40)

    chatbot = SimpleChatbot()

    while True:
        user_input = input("\nB·∫°n: ").strip()

        if user_input.lower() in ['quit', 'exit', 'tho√°t']:
            print("T·∫°m bi·ªát! üëã")
            break

        if user_input.lower() == 'clear':
            chatbot.clear_history()
            print("ƒê√£ x√≥a l·ªãch s·ª≠ h·ªôi tho·∫°i.")
            continue

        if not user_input:
            continue

        print("Bot: ", end="")
        response = chatbot.get_response(user_input)
        print(response)

if __name__ == "__main__":
    main()