import openai
import os
import json
import re
from typing import Dict, List, Tuple, Optional
from datetime import datetime
from models import MedicalData, MedicalPrompts, PatientSession, db
from telegram_notifier import send_telegram_message
from language_manager import LanguageManager
from web_search import WebSearcher
import threading

class MedicalChatbot:
    def __init__(self, api_key: str = None):
        self.client = openai.OpenAI(api_key=api_key or os.getenv("OPENAI_API_KEY"))
        self.prompts = MedicalPrompts()
        self.language_manager = LanguageManager()
        self.web_searcher = WebSearcher()

    def create_session(self, language='vi') -> str:
        """Create new patient session"""
        session = PatientSession()
        session.language = language if language in ['vi', 'en'] else 'vi'
        session.set_patient_data(MedicalData.get_initial_structure())
        session.set_conversation_history([])

        db.session.add(session)
        db.session.commit()

        return session.id

    def get_session(self, session_id: str) -> Optional[PatientSession]:
        """Get patient session by ID"""
        return PatientSession.query.get(session_id)

    def check_red_flags(self, message: str, language='vi') -> bool:
        """Check for emergency symptoms"""
        message_lower = message.lower()
        red_flags = self.language_manager.get_red_flags(language)
        for flag in red_flags:
            if flag in message_lower:
                return True
        return False

    def get_clinical_prompt(self, patient_data: Dict, conversation: List) -> str:
        """Get adaptive clinical reasoning prompt"""

        # Ensure inputs are correct types
        if not isinstance(patient_data, dict):
            patient_data = {}
        if not isinstance(conversation, list):
            conversation = []

        # Analyze current clinical picture
        chief_complaint_data = patient_data.get('chief_complaint', {})
        if not isinstance(chief_complaint_data, dict):
            chief_complaint_data = {}
        chief_complaint = chief_complaint_data.get('main_complaint', '')

        symptoms = patient_data.get('symptoms', [])
        if not isinstance(symptoms, list):
            symptoms = []

        demographics = patient_data.get('demographics', {})
        if not isinstance(demographics, dict):
            demographics = {}

        # Recent conversation context
        recent_messages = [msg for msg in conversation[-6:] if isinstance(msg, dict) and msg.get('role') in ['user', 'assistant']]

        # Check for PubMed summary
        pubmed_summary = patient_data.get('pubmed_summary')
        pubmed_section = ""
        if pubmed_summary and pubmed_summary not in ["pending", "failed"]:
            pubmed_section = f"""


T√ìM T·∫ÆT T·ª™ Y VƒÇN (PUBMED):
D·ª±a tr√™n tri·ªáu ch·ª©ng ch√≠nh, ƒë√¢y l√† c√°c h∆∞·ªõng ti·∫øp c·∫≠n v√† ch·∫©n ƒëo√°n ph√¢n bi·ªát ti·ªÅm nƒÉng:
{pubmed_summary}
S·ª≠ d·ª•ng th√¥ng tin n√†y ƒë·ªÉ h·ªèi c√°c c√¢u h·ªèi m·ª•c ti√™u nh·∫±m x√°c nh·∫≠n ho·∫∑c lo·∫°i tr·ª´ c√°c kh·∫£ nƒÉng tr√™n.
"""

        # Safe formatting
        symptoms_text = []
        for s in symptoms:
            if isinstance(s, dict):
                symptoms_text.append(s.get('name', ''))
            else:
                symptoms_text.append(str(s))

        # Build prompt safely without f-strings
        patient_info = demographics.get('name', '') + ', ' + demographics.get('age', '') + ', ' + demographics.get('gender', '')
        symptoms_info = ', '.join(symptoms_text)
        patient_data_str = json.dumps(patient_data, ensure_ascii=False, indent=2)
        conversation_str = json.dumps(recent_messages[-4:], ensure_ascii=False, indent=2)

        prompt = """
T√åNH H√åNH L√ÇM S√ÄNG HI·ªÜN T·∫†I:
B·ªánh nh√¢n: """ + patient_info + """
V·∫•n ƒë·ªÅ ch√≠nh: """ + chief_complaint + """
Tri·ªáu ch·ª©ng: """ + symptoms_info + pubmed_section + """

D·ªÆ LI·ªÜU ƒê√É THU TH·∫¨P:
""" + patient_data_str + """

CU·ªòC TR√í CHUY·ªÜN G·∫¶N ƒê√ÇY:
""" + conversation_str + """

CLINICAL REASONING:
D·ª±a v√†o th√¥ng tin hi·ªán c√≥, h√£y quy·∫øt ƒë·ªãnh c√¢u h·ªèi ti·∫øp theo theo nguy√™n t·∫Øc:
1. An to√†n tr∆∞·ªõc ti√™n - ki·ªÉm tra red flags n·∫øu c·∫ßn
2. Gi√° tr·ªã th√¥ng tin cao - h·ªèi ƒë·ªÉ ph√¢n bi·ªát ch·∫©n ƒëo√°n (s·ª≠ d·ª•ng g·ª£i √Ω t·ª´ PubMed n·∫øu c√≥)
3. Hi·ªáu qu·∫£ - tr√°nh h·ªèi l·∫°i ho·∫∑c kh√¥ng li√™n quan

DISCRIMINATING QUESTIONS d·ª±a v√†o chief complaint:
- N·∫øu ƒëau b·ª•ng: v·ªã tr√≠, lan t·ªèa, s·ªët, n√¥n, ƒë·∫°i ti·ªán
- N·∫øu ƒëau ƒë·∫ßu: ƒë·ªôt ng·ªôt/d·∫ßn, v·ªã tr√≠, k√®m bu·ªìn n√¥n/nh√¨n m·ªù
- N·∫øu ho: kh√¥/c√≥ ƒë·ªùm, m√°u, s·ªët, kh√≥ th·ªü
- N·∫øu ƒëau ng·ª±c: t√≠nh ch·∫•t, lan t·ªèa, kh√≥ th·ªü, ƒë·ªï m·ªì h√¥i

CH·ªà h·ªèi ti·ªÅn s·ª≠/thu·ªëc/gia ƒë√¨nh khi LI√äN QUAN tr·ª±c ti·∫øp ƒë·∫øn v·∫•n ƒë·ªÅ hi·ªán t·∫°i.

üö® NHI·ªÜM V·ª§ B·∫ÆT BU·ªòC - TR√çCH XU·∫§T D·ªÆ LI·ªÜU:
ƒê√¢y l√† quy t·∫Øc B·∫ÆNG BU·ªòC, KH√îNG TH·ªÇ B·ªé QUA:

1. Sau M·ªñI c√¢u tr·∫£ l·ªùi c·ªßa b·ªánh nh√¢n, b·∫°n PH·∫¢I ph√¢n t√≠ch v√† tr√≠ch xu·∫•t TO√ÄN B·ªò th√¥ng tin y t·∫ø
2. Th√¥ng tin bao g·ªìm: t√™n, tu·ªïi, tri·ªáu ch·ª©ng, th·ªùi gian, v·ªã tr√≠, m·ª©c ƒë·ªô, ti·ªÅn s·ª≠, thu·ªëc...
3. ƒê·∫∑t t·∫•t c·∫£ v√†o tr∆∞·ªùng "data" v·ªõi c·∫•u tr√∫c chu·∫©n:

CHU·∫®N TR√çCH XU·∫§T:
- N·∫øu b·ªánh nh√¢n n√≥i "t√¥i t√™n Qu·ªëc, 30 tu·ªïi" ‚Üí "demographics": {"name": "Qu·ªëc", "age": "30"}
- N·∫øu b·ªánh nh√¢n n√≥i "ƒëau b·ª•ng t·ª´ h√¥m qua" ‚Üí "chief_complaint": {"main_complaint": "ƒëau b·ª•ng", "duration": "t·ª´ h√¥m qua"}
- N·∫øu b·ªánh nh√¢n n√≥i "s·ªët nh·∫π, n√¥n" ‚Üí "symptoms": [{"name": "s·ªët", "severity": "nh·∫π"}, {"name": "n√¥n", "present": true}]

‚ö†Ô∏è L∆ØU √ù: N·∫øu tr∆∞·ªùng "data" tr·ªëng ho·∫∑c kh√¥ng c√≥, h·ªá th·ªëng s·∫Ω m·∫•t h·∫øt th√¥ng tin!

ƒê·ªäNH D·∫†NG RESPONSE B·∫ÆT BU·ªòC:
Tr·∫£ v·ªÅ JSON v·ªõi c·∫•u tr√∫c:
- message: c√¢u h·ªèi ti·∫øp theo cho b·ªánh nh√¢n
- action: continue/final_question/show_summary/complete
- clinical_reasoning: l√Ω do l√¢m s√†ng c·ªßa c√¢u h·ªèi
- data: object ch·ª©a th√¥ng tin tr√≠ch xu·∫•t ƒë∆∞·ª£c

V√ç D·ª§ C·ª§ TH·ªÇ:
data ph·∫£i c√≥: demographics (name, age, gender), chief_complaint (main_complaint, duration), symptoms (name, severity, location), medical_history, medications

QUAN TR·ªåNG: Tr∆∞·ªùng "data" KH√îNG BAO GI·ªú ƒê∆Ø·ª¢C TR·ªêNG! Lu√¥n ph·∫£i c√≥ √≠t nh·∫•t th√¥ng tin v·ª´a tr√≠ch xu·∫•t ƒë∆∞·ª£c.
"""
        return prompt

    def process_message(self, session_id: str, user_message: str) -> Dict:
        """Process user message and return response using clinical reasoning"""
        session = self.get_session(session_id)
        if not session:
            return {"error": "Session not found"}

        # Get session language
        session_language = session.language or 'vi'

        # Check for emergency symptoms
        if self.check_red_flags(user_message, session_language):
            return {
                "message": self.language_manager.get_emergency_response(session_language),
                "action": "emergency",
                "emergency": True
            }

        # Get current data and conversation
        patient_data = session.get_patient_data()
        conversation = session.get_conversation_history()

        # Add user message to conversation
        conversation.append({
            "role": "user",
            "content": user_message,
            "timestamp": datetime.now().isoformat()
        })

        # Build AI prompt
        # The stage_prompt is removed to allow for a more natural, AI-driven conversation flow
        # stage_prompt = self.get_stage_prompt(session.current_stage, patient_data, conversation)

        # Include the entire conversation for better context
        context_messages = []
        for msg in conversation:
            if isinstance(msg, dict) and msg.get('role') in ['user', 'assistant']:
                context_messages.append({
                    "role": msg.get('role', 'user'),
                    "content": msg.get('content', '')
                })

        messages = [
            {"role": "system", "content": self.get_clinical_prompt(patient_data, conversation)}
        ]

        # Add context messages
        messages.extend(context_messages)

        try:
            # Get AI response
            response = self.client.chat.completions.create(
                model="gpt-4o-mini",
                messages=messages,
                max_tokens=500,
                temperature=0.3,
                response_format={"type": "json_object"}
            )

            try:
                raw_response = response.choices[0].message.content
                print(f"DEBUG: Raw AI response: {raw_response}")

                ai_response = json.loads(raw_response)
                print(f"DEBUG: Parsed AI response keys: {ai_response.keys()}")

                # Ensure ai_response is a dictionary
                if not isinstance(ai_response, dict):
                    ai_response = {
                        "message": str(ai_response),
                        "action": "continue"
                    }
            except Exception as e:
                # Fallback if JSON parsing fails
                ai_response = {
                    "message": response.choices[0].message.content,
                    "action": "continue"
                }

            # Adaptive clinical decision making
            message_lower = user_message.lower()
            conversation_length = len(conversation)

            # Ensure ai_response is a dictionary before proceeding
            if not isinstance(ai_response, dict):
                ai_response = {
                    "message": str(ai_response) if ai_response else "Xin l·ªói, c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.",
                    "action": "continue"
                }

            # Check current session status and handle accordingly
            current_status = session.status

            # Handle completion requests at any stage
            completion_keywords = ["h·ªèi l·∫°i", "m·∫•y l·∫ßn", "r·ªìi ƒë√≥", "ƒë∆∞·ª£c ch∆∞a", "!!!", "m·∫Øc m·ªát", "qua l·∫π", "qua ƒëi", "m·∫•t th·ªùi gian", "ƒÉn ch·ª≠i", "ƒë·ªß r·ªìi", "xong ch∆∞a", "k·∫øt th√∫c", "d·ª´ng l·∫°i", "th√¥i", "h·∫øt r·ªìi", "xong r·ªìi"]

            # Handle responses based on current status
            if current_status == 'final_question':
                # User is responding to "C√≤n c√¢u g√¨ mu·ªën chia s·∫ª th√™m kh√¥ng?"
                negative_responses = ["kh√¥ng", "kh√¥ng c√≥", "h·∫øt r·ªìi", "th√¥i", "xong", "ok", "ƒë∆∞·ª£c r·ªìi"]
                positive_responses = ["c√≥", "c√≤n", "th√™m"]

                if any(keyword in message_lower for keyword in negative_responses) or any(keyword in message_lower for keyword in completion_keywords):
                    ai_response["action"] = "show_summary"
                elif any(keyword in message_lower for keyword in positive_responses):
                    ai_response["action"] = "continue"
                    ai_response["message"] = self.language_manager.get_workflow_message(session_language, 'additional_info')
                else:
                    # Extract any additional information provided
                    ai_response["action"] = "show_summary"

            elif current_status == 'awaiting_confirmation':
                # User is responding to summary confirmation
                confirmation_positive = ["c√≥", "ƒë√∫ng", "ch√≠nh x√°c", "ok", "ƒë∆∞·ª£c", "v√¢ng"]
                confirmation_negative = ["kh√¥ng", "sai", "ch∆∞a ƒë√∫ng", "c·∫ßn s·ª≠a", "b·ªï sung"]

                if any(keyword in message_lower for keyword in confirmation_positive) or any(keyword in message_lower for keyword in completion_keywords):
                    ai_response["action"] = "complete"
                    ai_response["message"] = self.language_manager.get_workflow_message(session_language, 'completion_confirmed')
                elif any(keyword in message_lower for keyword in confirmation_negative):
                    ai_response["action"] = "need_more_info"
                    ai_response["message"] = self.language_manager.get_workflow_message(session_language, 'need_correction')
                else:
                    # Treat any response as completion request
                    ai_response["action"] = "complete"
                    ai_response["message"] = self.language_manager.get_workflow_message(session_language, 'general_completion')

            # General completion check for any stage
            elif any(keyword in message_lower for keyword in completion_keywords):
                if current_status in ['active', 'need_more_info']:
                    ai_response["action"] = "final_question"
                    ai_response["message"] = self.language_manager.get_workflow_message(session_language, 'final_question')
                else:
                    ai_response["action"] = "complete"
                    ai_response["message"] = self.language_manager.get_workflow_message(session_language, 'simple_completion')

            # Auto-complete if conversation too long, but follow proper workflow
            elif conversation_length > 15:
                ai_response["action"] = "final_question"
                ai_response["message"] = self.language_manager.get_workflow_message(session_language, 'lengthy_conversation')

            # Add AI response to conversation
            conversation.append({
                "role": "assistant",
                "content": ai_response.get("message", ""),
                "timestamp": datetime.now().isoformat(),
                "action": ai_response.get("action"),
                "data": ai_response.get("data")
            })

            # Update patient data if provided by AI, or extract from conversation
            if ai_response.get("data"):
                self.update_patient_data(patient_data, ai_response["data"])
                session.set_patient_data(patient_data)  # CRITICAL: Save to session
                print(f"DEBUG: Updated and saved patient data from AI")
            else:
                # If AI didn't provide structured data, try to extract it ourselves
                print(f"DEBUG: AI didn't provide data, extracting from message: '{user_message}'")
                extracted_data = self.extract_data_from_message(user_message, patient_data)
                print(f"DEBUG: Extracted data: {extracted_data}")
                if extracted_data:
                    self.update_patient_data(patient_data, extracted_data)
                    session.set_patient_data(patient_data)  # CRITICAL: Save to session
                    print(f"DEBUG: Updated and saved patient data from extraction")

            # === Start PubMed Search Thread ===
            patient_data = session.get_patient_data() # Re-get the latest data
            chief_complaint = patient_data.get('chief_complaint', {}).get('main_complaint')
            
            # Start search if a complaint exists and a search hasn't been started
            if chief_complaint and 'pubmed_summary' not in patient_data:
                # Add a placeholder to prevent starting multiple searches
                patient_data['pubmed_summary'] = "pending"
                session.set_patient_data(patient_data)
                db.session.commit()

                # Start the background search
                thread = threading.Thread(
                    target=self._search_and_store_pubmed_summary,
                    args=(session.id, chief_complaint)
                )
                thread.start()
            # =================================

            # Handle workflow actions
            completed = False
            progress = min(conversation_length * 10, 100)

            # Handle different action types
            action = ai_response.get("action")

            if action == "final_question":
                progress = 85
                session.status = 'final_question'
            elif action == "show_summary":
                # Generate preliminary summary for review
                summary_data = self._generate_preliminary_summary(patient_data)
                ai_response["message"] = f"D·ª±a tr√™n th√¥ng tin b·∫°n ƒë√£ cung c·∫•p, t√¥i t√≥m t·∫Øt l·∫°i nh∆∞ sau:\n\n{summary_data}\n\nTh√¥ng tin tr√™n c√≥ ch√≠nh x√°c kh√¥ng? C√≥ c·∫ßn b·ªï sung g√¨ th√™m kh√¥ng?"
                progress = 95
                session.status = 'awaiting_confirmation'
            elif action == "need_more_info":
                progress = 80
                session.status = 'need_more_info'
            elif action in ["complete", "emergency"]:
                completed = True
                progress = 100
                session.status = 'completed'
            elif action == "continue" and current_status not in ['active']:
                # Reset to active if continuing from other states
                session.status = 'active'

            # Update session
            session.set_patient_data(patient_data)
            session.set_conversation_history(conversation)
            session.updated_at = datetime.utcnow()
            session.progress_percentage = progress

            # Stage progression based on conversation length
            conversation_length = len(conversation)
            if conversation_length > 15:  # Force completion after sufficient conversation
                session.current_stage = 7
                session.status = 'completed'
                session.progress_percentage = 100
            elif conversation_length > 12:
                session.current_stage = 6
            elif conversation_length > 9:
                session.current_stage = 5
            elif conversation_length > 6:
                session.current_stage = 4
            elif conversation_length > 4:
                session.current_stage = 3
            elif conversation_length > 2:
                session.current_stage = 2

            if session.current_stage > 6:
                session.status = 'completed'
                session.progress_percentage = 100

            # If conversation is complete, generate and return the final summary
            if session.status == 'completed' or ai_response.get("action") == "summarize":
                final_summary = self._generate_text_summary(patient_data)

                # Generate clinical insights for doctor
                clinical_insights = self._generate_clinical_insights(patient_data, conversation)
                doctor_message = f"{final_summary}\n\n{clinical_insights}"

                # Send the enhanced summary to Telegram
                send_telegram_message(doctor_message)

                return {
                    "message": final_summary,
                    "action": "end_session",
                    "stage": 7,
                    "progress": 100,
                    "completed": True
                }

            # For non-summary turns, save log and commit session
            self._save_conversation_log(session)
            db.session.commit()

            return {
                "message": ai_response.get("message", ""),
                "action": ai_response.get("action"),
                "stage": session.current_stage,
                "progress": session.progress_percentage,
                "completed": completed
            }

        except Exception as e:
            return {"error": f"L·ªói x·ª≠ l√Ω: {str(e)}"}

    def _search_and_store_pubmed_summary(self, session_id: str, query: str):
        """
        (Worker Thread) Searches PubMed and stores the summary in the session's patient_data.
        """
        try:
            summary = self.web_searcher.search_pubmed(query)
            if summary:
                # This runs in a separate thread, so we need to be careful with DB session.
                # For this implementation, we re-fetch the session and commit the single update.
                session = self.get_session(session_id)
                if session:
                    patient_data = session.get_patient_data()
                    patient_data['pubmed_summary'] = summary
                    session.set_patient_data(patient_data)
                    db.session.commit()
        except Exception as e:
            print(f"[THREAD ERROR] Failed to search PubMed for session {session_id}: {e}")
            # Optionally, update status to 'failed'
            session = self.get_session(session_id)
            if session:
                patient_data = session.get_patient_data()
                patient_data['pubmed_summary'] = "failed"
                session.set_patient_data(patient_data)
                db.session.commit()

    def update_patient_data(self, patient_data: Dict, new_data: Dict):
        """Update patient data with new information"""
        # Ensure both inputs are dictionaries
        if not isinstance(patient_data, dict):
            patient_data = {}
        if not isinstance(new_data, dict):
            return

        def deep_update(base_dict, update_dict):
            for key, value in update_dict.items():
                if key in base_dict:
                    if isinstance(base_dict[key], dict) and isinstance(value, dict):
                        deep_update(base_dict[key], value)
                    elif isinstance(base_dict[key], list) and isinstance(value, list):
                        # Prevent duplicates for lists like symptoms and medications
                        if key in ['symptoms', 'medications']:
                            self._merge_unique_items(base_dict[key], value)
                        else:
                            base_dict[key].extend(value)
                    else:
                        base_dict[key] = value
                else:
                    base_dict[key] = value

        deep_update(patient_data, new_data)

    def _merge_unique_items(self, existing_list: list, new_items: list):
        """Merge items into list while avoiding duplicates"""
        for new_item in new_items:
            # Check if item already exists
            is_duplicate = False
            for existing_item in existing_list:
                if isinstance(new_item, dict) and isinstance(existing_item, dict):
                    # For symptoms and medications, check name similarity
                    if new_item.get('name', '').lower() == existing_item.get('name', '').lower():
                        # Update existing item with new details
                        existing_item.update(new_item)
                        is_duplicate = True
                        break
                elif str(new_item).lower() == str(existing_item).lower():
                    is_duplicate = True
                    break

            if not is_duplicate:
                existing_list.append(new_item)

    def extract_data_from_message(self, user_message: str, current_data: Dict) -> Dict:
        """Extract structured data from user message using pattern matching"""
        message_lower = user_message.lower()
        extracted = {}

        # Extract name (if demographics not already set)
        current_name = current_data.get('demographics', {}).get('name', '')
        if not current_name:
            # Look for common name patterns
            if any(phrase in message_lower for phrase in ['t√¥i t√™n', 't√™n t√¥i', 't√¥i l√†']):
                words = user_message.split()
                for i, word in enumerate(words):
                    if word.lower() in ['t√™n', 'l√†'] and i + 1 < len(words):
                        name = words[i + 1].strip(',.')
                        if name and len(name) > 1:
                            extracted['demographics'] = {'name': name}
                            break
            # Heuristic for single-word name reply
            elif len(user_message.split()) == 1 and len(user_message) > 1:
                 extracted['demographics'] = {'name': user_message.strip()}


        # Extract chief complaint (if not already set)
        current_complaint = current_data.get('chief_complaint', {}).get('main_complaint', '')
        if not current_complaint:
            pain_keywords = ['ƒëau', 'nh·ª©c', 'kh√≥ ch·ªãu', 'ho', 's·ªët', 'ch√≥ng m·∫∑t', 'bu·ªìn n√¥n', 'ti√™u ch·∫£y']
            for keyword in pain_keywords:
                if keyword in message_lower:
                    extracted['chief_complaint'] = {'main_complaint': user_message.strip()}
                    break

        # Extract symptoms from current message
        symptoms = []

        # Helper function to check for negation
        def is_negated(symptom: str, message: str) -> bool:
            negation_patterns = [f'kh√¥ng {symptom}', f'ch∆∞a {symptom}', f'kh√¥ng c√≥ {symptom}']
            for pattern in negation_patterns:
                if pattern in message:
                    return True
            return False

        # Fever patterns
        import re
        if not is_negated('s·ªët', message_lower):
            fever_pattern = r's·ªët.*?(\d+)\s*ƒë·ªô'
            fever_match = re.search(fever_pattern, message_lower)
            if fever_match:
                symptoms.append({
                    'name': 's·ªët',
                    'severity': f"{fever_match.group(1)} ƒë·ªô"
                })
            elif 's·ªët' in message_lower:
                symptoms.append({'name': 's·ªët'})

        # Pain patterns with more detailed location extraction
        pain_locations = {
            'ƒëau b·ª•ng': 'b·ª•ng',
            'ƒëau ƒë·∫ßu': 'ƒë·∫ßu',
            'ƒëau ng·ª±c': 'ng·ª±c',
            'th∆∞·ª£ng v·ªã': 'th∆∞·ª£ng v·ªã',
            'h·∫° s∆∞·ªùn': 'h·∫° s∆∞·ªùn',
            'ƒëau l∆∞ng': 'l∆∞ng'
        }

        # Extract detailed pain description
        pain_info = {}
        if 'ƒëau' in message_lower:
            # Look for severity ratings (x/10)
            severity_pattern = r'(\d+)/10'
            severity_match = re.search(severity_pattern, message_lower)
            if severity_match:
                pain_info['severity'] = f"{severity_match.group(1)}/10"

            # Extract location details
            location_details = []
            if 'th∆∞·ª£ng v·ªã' in message_lower:
                location_details.append('th∆∞·ª£ng v·ªã')
            if 'ph√≠a d∆∞·ªõi' in message_lower and 'b√™n ph·∫£i' in message_lower:
                location_details.append('ph√≠a d∆∞·ªõi b√™n ph·∫£i')
            elif 'b√™n ph·∫£i' in message_lower:
                location_details.append('b√™n ph·∫£i')
            elif 'b√™n tr√°i' in message_lower:
                location_details.append('b√™n tr√°i')

            if location_details:
                pain_info['location'] = ', '.join(location_details)

            # Find the main pain type
            for pain_type, location in pain_locations.items():
                if pain_type in message_lower:
                    pain_info['name'] = pain_type
                    if 'location' not in pain_info:
                        pain_info['location'] = location
                    break

            if pain_info.get('name'):
                symptoms.append(pain_info)

        # Other symptoms with severity modifiers
        other_symptoms = {
            'bu·ªìn n√¥n': 'bu·ªìn n√¥n',
            'n√¥n': 'n√¥n',
            'ti√™u ch·∫£y': 'ti√™u ch·∫£y',
            'ch∆∞·ªõng b·ª•ng': 'ch∆∞·ªõng b·ª•ng',
            'm·ªát m·ªèi': 'm·ªát m·ªèi',
            'kh√≥ th·ªü': 'kh√≥ th·ªü',
            'm·ªát': 'm·ªát m·ªèi'
        }

        for symptom_key, symptom_name in other_symptoms.items():
            if is_negated(symptom_key, message_lower):
                continue

            if symptom_key in message_lower:
                symptom_info = {'name': symptom_name}

                # Look for severity modifiers
                severity_modifiers = ['h∆°i', 'nhi·ªÅu', 'r·∫•t', '√≠t', 'nh·∫π', 'n·∫∑ng']
                for modifier in severity_modifiers:
                    # Check if modifier is near the symptom keyword to avoid mis-association
                    try:
                        if modifier in message_lower.split(symptom_key)[0].split()[-2:]:
                             symptom_info['severity'] = modifier
                             break
                    except IndexError:
                        continue

                symptoms.append(symptom_info)

        if symptoms:
            extracted['symptoms'] = symptoms

        # Extract time information
        time_patterns = ['t·ª´ s√°ng nay', 't·ª´ h√¥m qua', 't·ª´ tu·∫ßn tr∆∞·ªõc', 't·ª´ th√°ng tr∆∞·ªõc', 'b·∫Øt ƒë·∫ßu t·ª´']
        for pattern in time_patterns:
            if pattern in message_lower:
                if 'chief_complaint' not in extracted:
                    extracted['chief_complaint'] = {}
                extracted['chief_complaint']['duration'] = pattern
                break

        # Extract medical history
        medical_history = {}

        # Surgery history
        surgery_keywords = ['ph·∫´u thu·∫≠t', 'm·ªï', 'n·ªôi soi']
        procedure_keywords = ['th·ªßng d·∫° d√†y', 'c·∫Øt ru·ªôt th·ª´a', 't√∫i th·ª´a ƒë·∫°i tr√†ng', 'n·ªôi soi']

        for keyword in surgery_keywords + procedure_keywords:
            if keyword in message_lower:
                if 'surgeries' not in medical_history:
                    medical_history['surgeries'] = []
                medical_history['surgeries'].append(user_message.strip())
                break

        # Chronic conditions
        chronic_keywords = ['b·ªánh ti·ªÉu ƒë∆∞·ªùng', 'cao huy·∫øt √°p', 'tim m·∫°ch', 'hen suy·ªÖn', 'vi√™m gan']
        for keyword in chronic_keywords:
            if keyword in message_lower:
                if 'chronic_conditions' not in medical_history:
                    medical_history['chronic_conditions'] = []
                medical_history['chronic_conditions'].append(keyword)

        # Allergies
        allergy_keywords = ['d·ªã ·ª©ng', 'kh√¥ng dung n·∫°p']
        for keyword in allergy_keywords:
            if keyword in message_lower:
                if 'allergies' not in medical_history:
                    medical_history['allergies'] = []
                # Extract just the allergen, not the whole message
                if 'd·ªã ·ª©ng v·ªõi' in message_lower:
                    allergen = message_lower.split('d·ªã ·ª©ng v·ªõi')[1].strip()
                    medical_history['allergies'].append(allergen)
                else:
                    medical_history['allergies'].append(user_message.strip())
                break

        if medical_history:
            extracted['medical_history'] = medical_history

        # Extract medications
        medications = []
        med_keywords = ['thu·ªëc', 'aspirin', 'paracetamol', 'ibuprofen']
        for keyword in med_keywords:
            if keyword in message_lower:
                # Extract dosage pattern (number + mg/g + /day/ng√†y)
                import re
                dosage_pattern = r'(\d+)\s*(mg|g).*?/(ng√†y|day)'
                dosage_match = re.search(dosage_pattern, message_lower)

                if dosage_match:
                    med_name = keyword if keyword != 'thu·ªëc' else user_message.strip()
                    medications.append({
                        'name': med_name,
                        'dosage': f"{dosage_match.group(1)}{dosage_match.group(2)}/{dosage_match.group(3)}"
                    })
                elif keyword != 'thu·ªëc':
                    medications.append({'name': keyword})

        if medications:
            extracted['medications'] = medications

        # Extract social history including sensitive information
        social_history = {}
        if 'kh√¥ng h√∫t thu·ªëc' in message_lower:
            social_history['smoking'] = 'kh√¥ng'
        elif 'h√∫t thu·ªëc' in message_lower:
            social_history['smoking'] = 'c√≥'

        if 'kh√¥ng u·ªëng r∆∞·ª£u' in message_lower:
            social_history['alcohol'] = 'kh√¥ng'
        elif 'u·ªëng r∆∞·ª£u' in message_lower or 'c√≥ u·ªëng r∆∞·ª£u' in message_lower:
            social_history['alcohol'] = 'c√≥'

        # Sexual history (important for anal conditions)
        if 'quan h·ªá ƒë∆∞·ªùng h·∫≠u m√¥n' in message_lower or 'quan h·ªá h·∫≠u m√¥n' in message_lower:
            social_history['sexual_activity'] = 'quan h·ªá ƒë∆∞·ªùng h·∫≠u m√¥n'

        # Extract frequency if mentioned
        if 'ng√†y' in message_lower and any(char.isdigit() for char in message_lower):
            import re
            freq_match = re.search(r'(\d+).*?l·∫ßn.*?ng√†y', message_lower)
            if freq_match:
                social_history['sexual_frequency'] = f"{freq_match.group(1)} l·∫ßn/ng√†y"

        # Risk factors
        if 'bi·ªán ph√°p b·∫£o v·ªá' in message_lower:
            if 'khi c√≥ khi kh√¥ng' in message_lower:
                social_history['protection'] = 'kh√¥ng th∆∞·ªùng xuy√™n'
            elif 'kh√¥ng' in message_lower:
                social_history['protection'] = 'kh√¥ng'
            else:
                social_history['protection'] = 'c√≥'

        if social_history:
            extracted['social_history'] = social_history

        return extracted

    def _generate_preliminary_summary(self, patient_data: dict) -> str:
        """Generate a preliminary summary for patient review"""
        if not isinstance(patient_data, dict):
            patient_data = {}

        demographics = patient_data.get("demographics", {})
        chief_complaint = patient_data.get("chief_complaint", {})
        symptoms = patient_data.get("symptoms", [])
        history = patient_data.get("medical_history", {})
        medications = patient_data.get("medications", [])
        social_history = patient_data.get("social_history", {})

        summary = "**TH√îNG TIN C√Å NH√ÇN:**\n"
        summary += f"- H·ªç t√™n: {demographics.get('name', 'Ch∆∞a c√≥')}\n"

        summary += f"\n**V·∫§N ƒê·ªÄ CH√çNH:**\n"
        summary += f"- Tri·ªáu ch·ª©ng: {chief_complaint.get('main_complaint', 'Ch∆∞a c√≥')}\n"

        if symptoms:
            summary += f"\n**C√ÅC TRI·ªÜU CH·ª®NG:**\n"
            for symptom in symptoms[:5]:  # Show first 5 symptoms
                if isinstance(symptom, dict):
                    name = symptom.get('name', '')
                    severity = f" ({symptom.get('severity')})" if symptom.get('severity') else ""
                    summary += f"- {name}{severity}\n"

        if history.get('surgeries'):
            summary += f"\n**TI·ªÄN S·ª¨ PH·∫™U THU·∫¨T:**\n"
            for surgery in history['surgeries'][:3]:  # Show first 3
                summary += f"- {surgery}\n"

        if medications:
            summary += f"\n**THU·ªêC ƒêANG D√ôNG:**\n"
            for med in medications[:3]:  # Show first 3
                if isinstance(med, dict):
                    summary += f"- {med.get('name', '')} {med.get('dosage', '')}\n"

        return summary

    def _generate_clinical_insights(self, patient_data: dict, conversation: list) -> str:
        """Generate clinical insights for the doctor"""
        if not isinstance(patient_data, dict):
            patient_data = {}

        demographics = patient_data.get("demographics", {})
        chief_complaint = patient_data.get("chief_complaint", {})
        symptoms = patient_data.get("symptoms", [])
        history = patient_data.get("medical_history", {})
        medications = patient_data.get("medications", [])

        insights = "\n=== CLINICAL INSIGHTS CHO B√ÅC Sƒ® ===\n\n"

        # Differential Diagnosis
        insights += "**CH·∫®N ƒêO√ÅN PH√ÇN BI·ªÜT:**\n"
        main_complaint = chief_complaint.get('main_complaint', '').lower()

        if 'ƒëau b·ª•ng' in main_complaint:
            insights += "- Vi√™m ru·ªôt th·ª´a (n·∫øu ƒëau h·∫° s∆∞·ªùn ph·∫£i)\n"
            insights += "- Vi√™m t√∫i m·∫≠t (n·∫øu ƒëau th∆∞·ª£ng v·ªã ph·∫£i + s·ªët)\n"
            insights += "- Vi√™m d·∫° d√†y/lo√©t d·∫° d√†y (n·∫øu c√≥ ti·ªÅn s·ª≠)\n"
            insights += "- Vi√™m t·ª•y (n·∫øu ƒëau lan ra l∆∞ng)\n"
            insights += "- T·∫Øc ru·ªôt (n·∫øu c√≥ n√¥n + ch∆∞·ªõng b·ª•ng)\n"

        elif 'ƒëau ƒë·∫ßu' in main_complaint:
            insights += "- Migraine\n"
            insights += "- CƒÉng th·∫≥ng th·∫ßn kinh\n"
            insights += "- TƒÉng huy·∫øt √°p\n"
            insights += "- Vi√™m xoang\n"

        elif 'ho' in main_complaint:
            insights += "- Vi√™m ph·∫ø qu·∫£n\n"
            insights += "- Vi√™m ph·ªïi\n"
            insights += "- Hen suy·ªÖn\n"
            insights += "- COPD\n"

        elif 'ƒëau h·∫≠u m√¥n' in main_complaint or 'h·∫≠u m√¥n' in main_complaint:
            insights += "- B·ªánh trƒ© (n·ªôi trƒ©, ngo·∫°i trƒ©)\n"
            insights += "- R·∫°n k·∫Ω h·∫≠u m√¥n (anal fissure)\n"
            insights += "- Vi√™m √°p xe h·∫≠u m√¥n\n"
            insights += "- Polyp tr·ª±c tr√†ng\n"
            insights += "- Ung th∆∞ tr·ª±c tr√†ng (n·∫øu tu·ªïi >50)\n"
            insights += "- Ch·∫•n th∆∞∆°ng h·∫≠u m√¥n\n"

        # Suggested Tests
        insights += "\n**ƒê·ªÄ NGH·ªä X√âT NGHI·ªÜM:**\n"
        if 'ƒëau b·ª•ng' in main_complaint and any('s·ªët' in str(s).lower() for s in symptoms):
            insights += "- C√¥ng th·ª©c m√°u (WBC, CRP)\n"
            insights += "- Si√™u √¢m b·ª•ng\n"
            insights += "- Amylase, Lipase (n·∫øu nghi ng·ªù vi√™m t·ª•y)\n"
            insights += "- Ch·ª©c nƒÉng gan (AST, ALT, Bilirubin)\n"

        if 'ƒëau h·∫≠u m√¥n' in main_complaint or 'h·∫≠u m√¥n' in main_complaint:
            insights += "- C√¥ng th·ª©c m√°u (lo·∫°i tr·ª´ thi·∫øu m√°u do m·∫•t m√°u m√£n t√≠nh)\n"
            insights += "- X√©t nghi·ªám ph√¢n t√¨m m√°u ·∫©n\n"
            insights += "- N·ªôi soi tr·ª±c tr√†ng sigma (n·∫øu c·∫ßn)\n"
            insights += "- HIV test (n·∫øu c√≥ y·∫øu t·ªë nguy c∆°)\n"
            insights += "- X√©t nghi·ªám STDs (Syphilis, Gonorrhea, Chlamydia)\n"

        if any('s·ªët' in str(s).lower() for s in symptoms):
            insights += "- C·∫•y m√°u (n·∫øu s·ªët cao)\n"
            insights += "- N∆∞·ªõc ti·ªÉu (t·ªïng qu√°t + c·∫•y)\n"

        # Physical Examination Focus
        insights += "\n**KH√ÅM L√ÇM S√ÄNG C·∫¶N CH√ö √ù:**\n"
        if 'ƒëau b·ª•ng' in main_complaint:
            insights += "- Kh√°m b·ª•ng: ƒë·ªô m·ªÅm, √°p t√¢m, ph·∫£n ·ª©ng th√†nh b·ª•ng\n"
            insights += "- D·∫•u hi·ªáu Murphy (vi√™m t√∫i m·∫≠t)\n"
            insights += "- ƒêi·ªÉm McBurney (vi√™m ru·ªôt th·ª´a)\n"
            insights += "- Ki·ªÉm tra ru·ªôt th·ª´a: d·∫•u Rovsing, Psoas\n"

        if 'ƒëau h·∫≠u m√¥n' in main_complaint or 'h·∫≠u m√¥n' in main_complaint:
            insights += "- Kh√°m v√πng h·∫≠u m√¥n: quan s√°t v·∫øt r·∫°n, kh·ªëi trƒ©, s∆∞ng t·∫•y\n"
            insights += "- ThƒÉm tr·ª±c tr√†ng b·∫±ng tay (n·∫øu b·ªánh nh√¢n cho ph√©p)\n"
            insights += "- Ki·ªÉm tra ph·∫£n x·∫° h·∫≠u m√¥n\n"
            insights += "- Quan s√°t t√≠nh ch·∫•t m√°u: t∆∞∆°i, s·∫≠m, c√≥ c·ª•c m√°u ƒë√¥ng\n"
            insights += "- Kh√°m b·∫πn: s·ªù h·∫°ch lympho\n"

        # Red Flags to Watch
        insights += "\n**D·∫§U HI·ªÜU C·∫¢NH B√ÅO:**\n"
        red_flags = []
        if any('s·ªët' in str(s).lower() for s in symptoms):
            red_flags.append("S·ªët cao >39¬∞C - nghi ng·ªù nhi·ªÖm tr√πng nghi√™m tr·ªçng")
        if 'n√¥n' in main_complaint.lower() or any('n√¥n' in str(s).lower() for s in symptoms):
            red_flags.append("N√¥n li√™n t·ª•c - nghi ng·ªù t·∫Øc ru·ªôt")
        if history.get('surgeries'):
            red_flags.append("Ti·ªÅn s·ª≠ ph·∫´u thu·∫≠t - nghi ng·ªù bi·∫øn ch·ª©ng sau m·ªï")

        # Anal-specific red flags
        if 'ƒëau h·∫≠u m√¥n' in main_complaint or 'h·∫≠u m√¥n' in main_complaint:
            bleeding_symptoms = [s for s in symptoms if 'm√°u' in str(s).lower() or 'ch·∫£y m√°u' in str(s).lower()]
            if bleeding_symptoms:
                red_flags.append("Ch·∫£y m√°u h·∫≠u m√¥n - c·∫ßn lo·∫°i tr·ª´ ung th∆∞ tr·ª±c tr√†ng")

            # Check for high-risk sexual behavior
            conversation_text = ' '.join([msg.get('content', '') for msg in conversation if isinstance(msg, dict)])
            if 'quan h·ªá' in conversation_text.lower() or 'hiv' in conversation_text.lower():
                red_flags.append("Y·∫øu t·ªë nguy c∆° cao STDs/HIV - c·∫ßn x√©t nghi·ªám screening")

        for flag in red_flags:
            insights += f"‚ö†Ô∏è {flag}\n"

        # Risk Factors
        insights += "\n**Y·∫æU T·ªê NGUY C∆†:**\n"
        if medications:
            for med in medications:
                if isinstance(med, dict) and 'aspirin' in med.get('name', '').lower():
                    insights += "- D√πng Aspirin: nguy c∆° lo√©t d·∫° d√†y, xu·∫•t huy·∫øt ti√™u h√≥a\n"

        if history.get('surgeries'):
            insights += f"- Ti·ªÅn s·ª≠ ph·∫´u thu·∫≠t: {', '.join(history['surgeries'])}\n"

        # Sexual health risk factors for anal conditions
        social_history = patient_data.get('social_history', {})
        if social_history.get('sexual_activity'):
            insights += f"- Ho·∫°t ƒë·ªông t√¨nh d·ª•c: {social_history['sexual_activity']}\n"
            if social_history.get('protection') == 'kh√¥ng th∆∞·ªùng xuy√™n':
                insights += "- Kh√¥ng s·ª≠ d·ª•ng bi·ªán ph√°p b·∫£o v·ªá th∆∞·ªùng xuy√™n - nguy c∆° STDs\n"
            if social_history.get('sexual_frequency'):
                insights += f"- T·∫ßn su·∫•t cao ({social_history['sexual_frequency']}) - nguy c∆° ch·∫•n th∆∞∆°ng\n"

        return insights

    def _generate_text_summary(self, patient_data: dict) -> str:
        """Generate a final text summary from patient data."""
        # Ensure patient_data is a dictionary
        if not isinstance(patient_data, dict):
            patient_data = {}

        demographics = patient_data.get("demographics", {})
        chief_complaint = patient_data.get("chief_complaint", {})
        symptoms = patient_data.get("symptoms", [])
        history = patient_data.get("medical_history", {})
        medications = patient_data.get("medications", [])
        family_history = patient_data.get("family_history", [])
        social_history = patient_data.get("social_history", {})

        # Ensure all retrieved values are of expected type
        if not isinstance(demographics, dict):
            demographics = {}
        if not isinstance(chief_complaint, dict):
            chief_complaint = {}
        if not isinstance(symptoms, list):
            symptoms = []
        if not isinstance(history, dict):
            history = {}
        if not isinstance(medications, list):
            medications = []
        if not isinstance(family_history, list):
            family_history = []
        if not isinstance(social_history, dict):
            social_history = {}

        summary = "### T√ìM T·∫ÆT B·ªÜNH S·ª¨ ###\n\n"
        summary += f"**TH√îNG TIN B·ªÜNH NH√ÇN**\n"
        summary += f"- **H·ªç v√† t√™n:** {demographics.get('name', 'Ch∆∞a r√µ')}\n"
        summary += f"- **Tu·ªïi:** {demographics.get('age', 'Ch∆∞a r√µ')}\n"
        summary += f"- **Gi·ªõi t√≠nh:** {demographics.get('gender', 'Ch∆∞a r√µ')}\n\n"

        summary += f"**L√ù DO ƒê·∫æN KH√ÅM**\n"
        summary += f"- **Tri·ªáu ch·ª©ng ch√≠nh:** {chief_complaint.get('main_complaint', 'Ch∆∞a r√µ')}\n\n"

        summary += "**B·ªÜNH S·ª¨ HI·ªÜN T·∫†I**\n"
        summary += f"- **M√¥ t·∫£:** {chief_complaint.get('description', 'Ch∆∞a c√≥ m√¥ t·∫£ chi ti·∫øt')}\n"
        if symptoms:
            # Remove duplicates and format symptoms nicely
            unique_symptoms = []
            seen_symptoms = set()

            for s in symptoms:
                if isinstance(s, dict):
                    symptom_name = s.get('name', 'kh√¥ng r√µ')
                    if symptom_name not in seen_symptoms:
                        symptom_detail = symptom_name
                        if s.get('severity'):
                            symptom_detail += f" ({s.get('severity')})"
                        if s.get('location') and s.get('location') != symptom_name:
                            symptom_detail += f" - {s.get('location')}"
                        unique_symptoms.append(symptom_detail)
                        seen_symptoms.add(symptom_name)
                else:
                    symptom_str = str(s)
                    if symptom_str not in seen_symptoms:
                        unique_symptoms.append(symptom_str)
                        seen_symptoms.add(symptom_str)

            summary += f"- **C√°c tri·ªáu ch·ª©ng k√®m theo:** {', '.join(unique_symptoms)}\n"
        summary += "\n"

        summary += "**TI·ªÄN S·ª¨ B·ªÜNH**\n"
        if history.get('chronic_conditions'):
            summary += f"- **B·ªánh m√£n t√≠nh:** {', '.join(history['chronic_conditions'])}\n"
        if history.get('surgeries'):
            summary += f"- **Ph·∫´u thu·∫≠t:** {', '.join(history['surgeries'])}\n"
        if history.get('allergies'):
            summary += f"- **D·ªã ·ª©ng:** {', '.join(history['allergies'])}\n"
        if not any([history.get('chronic_conditions'), history.get('surgeries'), history.get('allergies')]):
            summary += "- Kh√¥ng c√≥ ti·ªÅn s·ª≠ b·ªánh ƒë·∫∑c bi·ªát\n"
        summary += "\n"

        if medications:
            summary += "**THU·ªêC ƒêANG D√ôNG**\n"
            # Remove duplicate medications
            unique_meds = []
            seen_meds = set()

            for med in medications:
                if isinstance(med, dict):
                    med_name = med.get('name', 'Ch∆∞a r√µ').lower()
                    if med_name not in seen_meds:
                        summary += f"- {med.get('name', 'Ch∆∞a r√µ')} ({med.get('dosage', 'li·ªÅu l∆∞·ª£ng kh√¥ng r√µ')})\n"
                        seen_meds.add(med_name)
                else:
                    med_str = str(med).lower()
                    if med_str not in seen_meds:
                        summary += f"- {str(med)}\n"
                        seen_meds.add(med_str)
            summary += "\n"

        if family_history:
            summary += f"**TI·ªÄN S·ª¨ GIA ƒê√åNH**\n"
            summary += f"- {', '.join(family_history)}\n\n"

        if any(v for v in social_history.values() if v):
            summary += f"**L·ªêI S·ªêNG V√Ä Y·∫æU T·ªê NGUY C∆†**\n"
            if social_history.get('smoking'):
                summary += f"- H√∫t thu·ªëc: {social_history['smoking']}\n"
            if social_history.get('alcohol'):
                summary += f"- R∆∞·ª£u bia: {social_history['alcohol']}\n"
            if social_history.get('sexual_activity'):
                summary += f"- Ho·∫°t ƒë·ªông t√¨nh d·ª•c: {social_history['sexual_activity']}\n"
                if social_history.get('sexual_frequency'):
                    summary += f"- T·∫ßn su·∫•t: {social_history['sexual_frequency']}\n"
                if social_history.get('protection'):
                    summary += f"- Bi·ªán ph√°p b·∫£o v·ªá: {social_history['protection']}\n"
            summary += "\n"
        
        summary += "---\n"
        summary += "B√°o c√°o n√†y ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông. Th√¥ng tin ch·ªâ mang t√≠nh tham kh·∫£o, kh√¥ng thay th·∫ø cho ch·∫©n ƒëo√°n c·ªßa b√°c sƒ©."
        
        return summary

    def _save_conversation_log(self, session: PatientSession):
        """Saves the entire session data to a log file."""
        try:
            log_dir = 'instance/logs'
            os.makedirs(log_dir, exist_ok=True)
            
            file_path = os.path.join(log_dir, f"{session.id}.json")
            
            log_data = {
                "sessionId": session.id,
                "createdAt": session.created_at.isoformat(),
                "updatedAt": session.updated_at.isoformat(),
                "status": session.status,
                "currentStage": session.current_stage,
                "progressPercentage": session.progress_percentage,
                "patientData": session.get_patient_data(),
                "conversationHistory": session.get_conversation_history()
            }

            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(log_data, f, ensure_ascii=False, indent=2)

        except Exception as e:
            print(f"[LOGGING ERROR] Failed to save log for session {session.id}: {e}")

    def get_session_summary(self, session_id: str) -> Dict:
        """Get session summary and progress"""
        session = self.get_session(session_id)
        if not session:
            return {"error": "Session not found"}

        patient_data = session.get_patient_data()
        conversation = session.get_conversation_history()

        return {
            "session_id": session.id,
            "status": session.status,
            "current_stage": session.current_stage,
            "progress_percentage": session.progress_percentage,
            "created_at": session.created_at.isoformat(),
            "updated_at": session.updated_at.isoformat(),
            "patient_data": patient_data,
            "conversation_history": conversation
        }

    def validate_session_data(self, session_id: str) -> Dict:
        """Validate session data completeness"""
        session = self.get_session(session_id)
        if not session:
            return {"error": "Session not found"}

        patient_data = session.get_patient_data()
        if not isinstance(patient_data, dict):
            patient_data = {}

        validation_result = {
            "is_complete": True,
            "missing_fields": [],
            "warnings": []
        }

        # Check required demographics
        demographics = patient_data.get('demographics', {})
        if not isinstance(demographics, dict):
            demographics = {}

        if not demographics.get('name'):
            validation_result["missing_fields"].append("name")
            validation_result["is_complete"] = False

        # Check chief complaint
        chief_complaint = patient_data.get('chief_complaint', {})
        if not isinstance(chief_complaint, dict):
            chief_complaint = {}

        if not chief_complaint.get('main_complaint'):
            validation_result["missing_fields"].append("main_complaint")
            validation_result["is_complete"] = False

        return validation_result